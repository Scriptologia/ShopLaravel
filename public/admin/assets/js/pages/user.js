var filter = '';var search = '';var sort = '';var draftRemove = '';var colName = null;var response = [];var timerId = false;var inputVal = '';var formImport = $('#importUsers');let formData = new FormData();$('#importModal').on('hidden.bs.modal', function (e) {    formData.delete('file')    formImport.find('.text-danger').remove()    $('#importUsers input[name="file"]').val('')})formImport.on('submit', function(e) {e.preventDefault(); })$('#importButton').on('click', function (e) {    let file = $('#importUsers input[name="file"]')[0].files[0];    formData.append('file', file)    axios.post(routes.apiImport, formData)        .then((resp) => {            updateList()            $('#importModal').modal('hide')            Swal.fire({                position: 'center',                icon: 'success',                title: 'Users inserted successfully!',                showConfirmButton: false,                timer: 2000,                showCloseButton: true            });        } )        .catch((error) => {            if (error.response && error.response.status === 403) {                Swal.fire({                    position: 'center',                    icon: 'error',                    title: error.response.data.message,                    showConfirmButton: false,                    timer: false,                    showCloseButton: true                });            }            if (error.response && error.response.status === 422) {                formImport.find('.text-danger').remove()                var errors = error.response.data.errors;                for (var i in errors) {                    let span = document.createElement('span');                    span.className = "text-danger";                    span.innerHTML = errors[i][0]                    if (i == "file") formImport.append(span);                }            }        })})//Tablevar customerListAll = new gridjs.Grid({    columns: [        {            name: '# id',            width: '50px'        }, {            name: 'name',            width: '200px'        }, {            name: 'role',            width: '100px'        }, {            name: 'email',            width: '150px'        },{            name: 'phone',            width: '100px'        },  {            name: 'created',            width: '100px'        },  {            name: 'verified',            width: '100px'        },  {            name: 'draft',            width: '100px'        }, {            name: 'status',            width: '80px'        }, {            name: "Action",            width: '80px',            sort: {                enabled: false            },            formatter: function formatter(cell, row) {                var x = new DOMParser().parseFromString(row._cells[0].data.props.content, "text/html").body.querySelector(".checkbox-customer-list .form-check-input").value;                return gridjs.html('<div class="dropdown">' + '<button class="btn btn-soft-secondary btn-sm dropdown" type="button" data-bs-toggle="dropdown" aria-expanded="false">' + '<i class="ri-more-fill"></i>' + '</button>' + '<ul class="dropdown-menu dropdown-menu-end">' + '<li><a class="dropdown-item show-list" data-show-id="' + x + '" href="#"><i class="ri-eye-fill align-bottom me-2 text-muted"></i> View</a></li>' + '<li><a href="#showModal" data-bs-toggle="modal" class="dropdown-item edit-list" data-edit-id="' + x + '" href="#"><i class="ri-pencil-fill align-bottom me-2 text-muted"></i> Edit</a></li>' + '<li class="dropdown-divider"></li>' + '<li><a class="dropdown-item remove-list" href="#" data-id="' + x + '" data-bs-toggle="modal" data-bs-target="#removeItemModal"><i class="ri-delete-bin-fill align-bottom me-2 text-muted"></i> Delete</a></li>' + '</ul>' + '</div>');            }        }    ],    className: {        th: 'text-muted',    },    server: {        url: routes.apiUsers,        total: data => data.meta.total,        then: data => {refreshTable(); response = data.data; setTimeout(() => {timerId = true}, 300);        return data.data.map(item => [            gridjs.html('<div class="form-check checkbox-customer-list">\                    <input class="form-check-input" type="checkbox" value="' +item.id + '" id="checkbox-' + item.id + '">\                    <label class="form-check-label" for="checkbox-' + item.id + '">' + item.id + '</label>\                  </div>'),            gridjs.html('<div class=""><h5 class="fs-14 mb-1"><a href="' +  '/' + item.id + '" class="text-dark">'+ item.name+'</a></h5></div>'),            item.role,            item.email,            phone_mask(item.phone),            gridjs.html(str_dt(item.created_at)),            gridjs.html(str_dt(item.email_verified_at)),            gridjs.html(str_dt(item.deleted_at)),            gridjs.html( isStatus(item.status))        ]);}    },    sort: {        multiColumn: false,        server: {            url: (prev, columns) => {                if (!columns.length) return prev;                const col = columns[0];                const dir = col.direction === 1 ? 'asc' : 'desc';                let colName = ['id', 'name', 'role_id', 'email', 'phone', 'created_at', 'email_verified_at', 'deleted_at', 'status'][col.index];                colName = colName;                return `${prev}?order=${colName}&dir=${dir}`;            }        }    },    pagination: {        enabled: true,        limit: 10,        server: {            url: (prev, page, limit) => {return prev.indexOf("?") != -1? `${prev}&${filter}${search}page=${page + 1}` : `${prev}?${filter}${search}page=${page + 1}`;}        }    }}).render(document.getElementById("table-customer-list-all")); // table-customer-list-verified$('a[href="emailnav-all"]').on('click', function () {    draftRemove = ''; filter = '';updateList();})$('a[href="emailnav-subscribed"]').on('click', function () {    draftRemove = ''; filter = 'filter=subscribed&'; updateList();})$('a[href="emailnav-verified"]').on('click', function () {    draftRemove = ''; filter = 'filter=email_verified_at&'; updateList();})$('a[href="emailnav-draft"]').on('click', function () {    draftRemove = 'draft'; filter = 'filter=deleted_at&' ; updateList();})var searchField = $("input.search");searchField.on("keyup", function () {    if(!timerId)  $(this).val(inputVal);    inputVal = $(this).val().toLowerCase();    search = 'search='+inputVal+'&';    updateList();}); // searchvar idField = document.getElementById("id-field"),  customerNameField = document.getElementById("customername-field"),  customerSurnameField = document.getElementById("customersurname-field"),  emailField = document.getElementById("email-field"),  dateField = document.getElementById("date-field"),  countryField = document.getElementById("country-field"),  phoneField = $("#phone-field").mask('00 (000) 000-0000'),  statusField = document.getElementById("status-field"),  addBtn = document.getElementById("add-btn"),  editBtn = document.getElementById("edit-btn"),  form = document.getElementById("form");var countryVal = new Choices(countryField, { searchEnabled: false });var statusVal = new Choices(statusField, { searchEnabled: false });document.getElementById("showModal").addEventListener("show.bs.modal", function (e) {  if (e.relatedTarget.classList.contains("edit-list")) {    document.getElementById("exampleModalLabel").innerHTML = "Edit Customer";    document.getElementById("showModal").querySelector(".modal-footer").style.display = "block";    document.getElementById("add-btn").style.display = "none";    document.getElementById("edit-btn").style.display = "block";  } else if (e.relatedTarget.classList.contains("add-btn")) {    document.getElementById("exampleModalLabel").innerHTML = "Add Customer";    document.getElementById("showModal").querySelector(".modal-footer").style.display = "block";    document.getElementById("edit-btn").style.display = "none";    document.getElementById("add-btn").style.display = "block";  } else {    document.getElementById("exampleModalLabel").innerHTML = "List Customer";    document.getElementById("showModal").querySelector(".modal-footer").style.display = "none";  }});document.getElementById("showModal").addEventListener("hidden.bs.modal", function () {  clearFields();});function SearchData() {  var isstatus = document.getElementById("idStatus").value;  var pickerVal = document.getElementById("datepicker-range").value;  var date1 = pickerVal.split(" to ")[0];  var date2 = pickerVal.split(" to ")[1];   filter = ''   if(pickerVal) filter += 'created_at='+ JSON.stringify([new Date(date1), new Date(date2)]) + '&';   if(isstatus) filter +='status=' + isstatus + '&';    updateList();}//поиск по дате и статусуform.addEventListener("submit", function(e) {e.preventDefault();});addBtn.addEventListener("click", function (e) {    if(        customerNameField.value !== "" &&        customerSurnameField.value !== "" &&        countryVal.getValue(true) &&        statusVal.getValue(true)    ) {        let data = {            name: customerNameField.value,            surname: customerSurnameField.value,            email: emailField.value,            phone: phoneField.cleanVal(),            status: statusVal.getValue(true),            country: countryVal.getValue(true)        };        axios.post(routes.apiUser.update, data)            .then((response) => {                document.getElementById("close-modal").click();                clearFields();                updateList();                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Customer inserted successfully!',                    showConfirmButton: false,                    timer: 2000,                    showCloseButton: true                });            })            .catch((error) => {                if (error.response && error.response.status === 403) {                    Swal.fire({                        position: 'center',                        icon: 'error',                        title: error.response.data.message,                        showConfirmButton: false,                        timer: false,                        showCloseButton: true                    });                }                if (error.response && error.response.status === 422) {                    form.querySelectorAll('.text-danger').forEach(e => e.remove())                    var errors = error.response.data.errors;                    for (var i in errors) {                        let span = document.createElement('span');                        span.className = "text-danger";                        span.innerHTML = errors[i][0]                        if (i == "email") emailField.after(span);                        if (i == "name") customernameField.after(span);                        if (i == "surname") emailSurnameField.after(span);                        if (i == "phone") phoneField.after(span);                    }                }                })    }});editBtn.addEventListener("click", function (e) {    if(        customerNameField.value !== "" &&        customerSurnameField.value !== "" &&        countryVal.getValue(true) &&        statusVal.getValue(true)    ) {        let data = {            id: idField.value,            name: customerNameField.value,            surname: customerSurnameField.value,            email: emailField.value,            phone: phoneField.cleanVal(),            status: statusVal.getValue(true),            country: countryVal.getValue(true)        };        axios.post(routes.apiUser.update, data)            .then( resp => {                document.getElementById("close-modal").click();                clearFields();                updateList();                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Customer updated Successfully!',                    showConfirmButton: false,                    timer: 2000,                    showCloseButton: true                });            })            .catch( (err) => {                if(err.response)                Swal.fire({                    position: 'center',                    icon: 'error',                    title: err.response.data.message,                    showConfirmButton: false,                    timer: false,                    showCloseButton: true                });            })    }});function isStatus(val) {  switch (val) {    case "Active":      return (        '<span class="badge badge-soft-success text-uppercase">' +        val +        "</span>"      );    case "Block":      return (        '<span class="badge badge-soft-danger text-uppercase">' +        val +        "</span>"      );  }}var isSelected = 0;function checkRemoveItem() {    var tabEl = $('a[data-bs-toggle="tab"]');    tabEl.each(function (el) {        $(this).off('show.bs.tab');        $(this).on('show.bs.tab', function (event) {            draftRemove =null;            if($(this).attr('href') === "customernav-draft") draftRemove = "draft";            isSelected = 0;            $("#selection-element").css('display', 'none');        });    });    setTimeout(function () {        $(".checkbox-customer-list input").each(function (item) {            $(this).on('click', function (event) {                if (event.target.checked == true) {                    event.target.closest('tr').classList.add("gridjs-tr-selected");                } else {                    event.target.closest('tr').classList.remove("gridjs-tr-selected");                }                var checkboxes = $('.checkbox-customer-list input:checked');                isSelected = checkboxes.length;                if (event.target.closest('tr').classList.contains("gridjs-tr-selected")) {                    $("#select-content").html(isSelected);                    isSelected > 0 ? $("#selection-element").css('display', 'block') : $("#selection-element").css('display', 'none');                } else {                    $("#select-content").html(isSelected);                    isSelected > 0 ? $("#selection-element").css('display', 'block') : $("#selection-element").css('display', 'none');                }            });        });    }, 100);} // check to remove itemfunction removeItems() {    var removeItem = $('#removeItemModal');    removeItem.off();    removeItem.on('show.bs.modal', function (event) {        isSelected = 0;        $("#delete-customer").off();        $("#delete-customer").on("click", function () {            var filtered = '';            let selected = $(".gridjs-tr.gridjs-tr-selected");            if(selected) {                var values = [];                selected.each(function () {                    values.push($(this).find('input').val() * 1);                });                deleteItemsFromServer(values, draftRemove);            }            $("#btn-close").click();            let elem = $("#selection-element");            if (elem) elem.css('display', 'none');        });    });}function removeSingleItem() {    $('.remove-list').on('click', function() {        let id = $(this).attr('data-id');console.log(id)        $('#delete-customer').off('click');        $('#delete-customer').on('click', function () {            if (id) deleteItemsFromServer([id * 1], draftRemove);            $("#btn-close").click();        });    })    // $('.edit-list').on('click', function(event) {    //     event.preventDefault();    //     let id = $(this).attr('data-edit-id');    //     window.location.href = routes.customer.edit;    //     });    // $('.show-list').on('click', function(event) {    //     event.preventDefault();    //     let id = $(this).attr('data-show-id');    //     window.location.href = routes.customer.view+'/'+id;    //     });}function refreshCallbacks() {    editBtns = $(".edit-list");    form.querySelectorAll('.text-danger').forEach(e => e.remove());    Array.from(editBtns).forEach(function (btn) {        btn.addEventListener("click", function (e) {            itemId = $(this).attr('data-edit-id');            let item = response.find(it => it.id == itemId);            idField.value = itemId;            countryField.value = item.country;            countryVal.setChoiceByValue(item.country);            statusField.value = item.status;            statusVal.setChoiceByValue(item.status);            customerNameField.value = item.name;            customerSurnameField.value = item.surname;            emailField.value = item.email;            phoneField.mask('00 (000) 000-0000').val(item.phone).trigger('input');            dateField.value = item.created_at;            flatpickr("#date-field", {                      enableTime: true,                      dateFormat: "d M, Y",                      defaultDate: item.created_at,                    });        });    });}function clearFields() {  customerNameField.value = "";  customerSurnameField.value = "";  emailField.value = "";  dateField.value = "";  phoneField.val("");  if (statusVal) statusVal.destroy();    statusVal = new Choices(statusField);    if (countryVal) countryVal.destroy();    countryVal = new Choices(countryField);}var str_dt = function formatDate(date) {    var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];    if(!date) return '-';    var d = new Date(date),        time_s = (d.getHours() + ':' + d.getMinutes());    var t = time_s.split(":");    var hours = t[0];    var minutes = t[1];    var newformat = hours >= 12 ? 'PM' : 'AM';    hours = hours % 12;    hours = hours ? hours : 12;    minutes = minutes < 10 ? '0' + minutes : minutes;    month = '' + monthNames[(d.getMonth())],        day = '' + d.getDate(),        year = d.getFullYear();    if (month.length < 2)        month = '0' + month;    if (day.length < 2)        day = '0' + day;    return [day + " " + month + "," + year + " <small class='text-muted'>" + hours + ':' + minutes + ' ' + newformat + "</small>"];};var phone_mask = function (str) {    let x = str.match(/(\d{2})(\d{3})(\d{3})(\d{4})/)    return x[1] + ' (' + x[2] + ') ' + x[3] + '-' + x[4];}function deleteItemsFromServer (ids, draftRemove = null) {    axios.post(routes.apiUser.delete, {ids: ids, draftRemove: draftRemove})        .then(resp => {            Swal.fire({                position: 'center',                icon: 'success',                title: 'Order deleteded Order!',                showConfirmButton: false,                timer: 2000,                showCloseButton: true            });             updateList()        })        .catch( err => {            Swal.fire({                position: 'center',                icon: 'error',                title: err.response.data.message,                showConfirmButton: false,                timer: false,                showCloseButton: true            });        })}function updateList() {    if(timerId) {        customerListAll.forceRender();        refreshTable()        timerId = false;    }}function refreshTable() {    $("#select-content").html(0); $("#selection-element").css('display', 'none')    setTimeout(()=> {        removeSingleItem();        checkRemoveItem();        refreshCallbacks()        removeItems();    }, 1000)}